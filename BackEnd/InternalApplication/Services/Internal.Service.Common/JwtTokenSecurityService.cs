// <autogenerated />
namespace Internal.Service.Common
{
    using Core.CommonModels;
    using Internal.Service.Common.Interface;
    using Microsoft.Extensions.Caching.Memory;
    using Microsoft.Extensions.Configuration;
    using Microsoft.Extensions.Logging;
    using Microsoft.IdentityModel.Tokens;
    using System;
    using System.IdentityModel.Tokens.Jwt;
    using System.Security.Claims;
    using System.Text;

    /// <summary>
    /// JWT Token security service class
    /// </summary>
    public class JwtTokenSecurityService : IJwtTokenSecurityService
    {
        private readonly IConfiguration _configuration;
        private readonly IMemoryCache _cache;
        private readonly ILogger<JwtTokenSecurityService> _logger;

        /// <summary>
        /// Constructor.
        /// </summary>
        /// <param name="configuration">IConfiguration</param>
        /// <param name="cache">IMemoryCache</param>
        /// <param name="logger">ILogger<JwtTokenSecurityService></param>
        public JwtTokenSecurityService(IConfiguration configuration, IMemoryCache cache, ILogger<JwtTokenSecurityService> logger)
        {
            _configuration = configuration;
            _cache = cache;
            _logger = logger;
        }

        /// <summary>
        /// Create token method
        /// </summary>
        /// <param name="user">UserModel object.</param>
        /// <returns>JwtTokenModel</returns>
        public JwtTokenModel CreateToken(UserModel user)
        {
            try
            {
                var jwtSecurityToken = GetJwtSecurityToken(user);

                var token = new JwtTokenModel
                {
                    AccessToken = new JwtSecurityTokenHandler().WriteToken(jwtSecurityToken),
                    Expiration = jwtSecurityToken.ValidTo.Ticks,
                    RefreshToken = Guid.NewGuid().ToString("N"),
                    UserInfo = user
                };

                var refreshTokenData = new TokenModel
                {
                    Token = token.RefreshToken,
                    UserId = user.Id
                };

                var cacheEntryOptions = new MemoryCacheEntryOptions().SetAbsoluteExpiration(jwtSecurityToken.ValidTo);
                _cache.Set(token.RefreshToken, refreshTokenData, cacheEntryOptions);

                return token;
            }
            catch (Exception ex)
            {
                _logger.LogError($"CreateToken {ex}");
                return null;
            }
        }

        private JwtSecurityToken GetJwtSecurityToken(UserModel user)
        {
            var accessTokenLifeTimeValue = double.Parse(_configuration["JwtSecurityToken:AccessTokenLifetime"]);

            var now = DateTime.UtcNow;
            var accessTokenLifetime = now.AddMinutes(accessTokenLifeTimeValue);

            var claims = new[] { new Claim(JwtRegisteredClaimNames.Sub, user.Id.ToString()),
                                 new Claim(JwtRegisteredClaimNames.UniqueName, user.Id.ToString()),
                                 new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString("N")),
                               };

            var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_configuration["JwtSecurityToken:SecretKey"]));
            var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);

            return new JwtSecurityToken(issuer: _configuration["JwtSecurityToken:Issuer"],
                                        audience: _configuration["JwtSecurityToken:Audience"],
                                        claims: claims,
                                        notBefore: now,
                                        expires: accessTokenLifetime,
                                        signingCredentials: creds);
        }
    }
}

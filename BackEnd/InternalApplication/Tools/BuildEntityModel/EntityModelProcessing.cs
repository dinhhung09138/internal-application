// <autogenerated />
namespace BuildEntityModel
{
    using System;
    using System.Text;
    using System.Collections.Generic;
    using BuildEntityModel.Models;
    using BuildEntityModel.File;
    using System.Threading.Tasks;

    /// <summary>
    /// Generate entity model class.
    /// </summary>
    public class EntityModelProcessing
    {
        private readonly string AutoGenerated = "// <autogenerated />";
        private readonly string namespaceString = "Internal.Data.Security.Entity";

        private readonly IFile _fileCreator;

        /// <summary>
        /// Constructor.
        /// </summary>
        public EntityModelProcessing()
        {
            _fileCreator = new EntityFile();
        }

        /// <summary>
        /// Processing
        /// </summary>
        /// <param name="tables">list table data</param>
        public async Task Processing(List<Table> tables)
        {
            try
            {
                foreach (var item in tables)
                {
                    await CreateModel(item);
                }
            }
            catch(Exception ex)
            {
                Console.WriteLine($"Processing {ex.Message}");
            }
        }

        /// <summary>
        /// Create model class
        /// </summary>
        /// <param name="table"></param>
        private async Task CreateModel(Table table)
        {
            try
            {
                string type = string.Empty;
                StringBuilder fileContent = new StringBuilder();

                fileContent.AppendLine(AutoGenerated);
                fileContent.AppendLine($"namespace {namespaceString}");
                fileContent.AppendLine("{");
                fileContent.AppendLine($"   using System;");
                fileContent.AppendLine($"   ");
                fileContent.AppendLine($"   /// <summary>");
                fileContent.AppendLine($"   /// {table.TableName} entity.");
                fileContent.AppendLine($"   /// </summary>");
                fileContent.AppendLine($"   public class {table.TableName}");
                fileContent.AppendLine("   {");
                foreach (var c in table.Columns)
                {
                    type = string.Empty;
                    switch (c.DataType)
                    {
                        case "nvarchar":
                        case "varchar":
                        case "text":
                            type = "string";
                            break;
                        case "smallint":
                        case "bigint":
                        case "int":
                            type = "int";
                            break;
                        case "datetime":
                        case "timestamp":
                            type = "DateTime";
                            break;
                        case "money":
                        case "decimal":
                            type = "decimal";
                            break;
                        case "numeric":
                        case "float":
                            type = "double";
                            break;
                        case "bit":
                            type = "bool";
                            break;
                        case "tinyint":
                            type = "byte";
                            break;
                        case "uniqueidentifier":
                            type = "Guid";
                            break;
                        default:
                            break;
                    }
                    fileContent.AppendLine("       pubic " + type + CheckNull(c.DataType, c.Nullable) + " " + c.ColumnName + " { get; set; }");
                }
                fileContent.AppendLine("   }");
                fileContent.AppendLine("}");

                await _fileCreator.CreateFile($"{table.TableName}.cs", fileContent.ToString());

            }
            catch(Exception ex)
            {
                Console.WriteLine($"CreateModel {ex.Message}");
            }
        }

        /// <summary>
        /// Get null character based on datatype and nullable status from database.
        /// </summary>
        /// <param name="dataType">Datatype.</param>
        /// <param name="nullable">Status</param>
        /// <returns>return string empty or '?'</returns>
        private string CheckNull(string dataType, bool nullable)
        {
            switch (dataType)
            {
                case "nvarchar":
                case "varchar":
                case "text":
                    return "";
                case "smallint":
                case "bigint":
                case "int":
                case "datetime":
                case "timestamp":
                case "money":
                case "decimal":
                case "numeric":
                case "float":
                case "bit":
                case "tinyint":
                case "uniqueidentifier":
                    if(nullable == true)
                    {
                        return "?";
                    }
                    return "";
                default:
                    return "";
            }
        }
    }
}
